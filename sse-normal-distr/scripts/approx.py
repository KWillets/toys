import numpy as np
from math import log, sqrt
import sys

def f1(x):
    return sqrt(-2.0 * log(x))   

functions = {
    'f1': f1
}


def main():
    SAMPLES = 1000000
    ORDER   = 4

    function_name = sys.argv[1]
    path = sys.argv[2]
    function = functions[function_name]

    print "Generating %s" % (function_name)
    arguments = np.linspace(0.0, 1.0, SAMPLES)[1:]
    lines = generate_function(function, arguments, ORDER)

    with open(path, 'wt') as f:
        comment = 'automatically generated by: %s' % (' '.join(sys.argv))
        f.write(render_function(lines, function_name, comment))
        print "Wrote %s" % path


def generate_function(function, arguments, order):

    assert order > 1

    y = [function(x) for x in arguments]
    x = arguments

    coefs = np.polyfit(x, y, order)
    del x, y

    coef_name  = ['coef%d' % (i + 1) for i in xrange(len(coefs))]
    power_name = ['x%d' % (i + 1) for i in xrange(len(coefs))]
    power_name[0] = 'x';

    lines = []
    for i, coef in enumerate(coefs):
        lines.append('const __m128 %s = _mm_set1_ps(%0.6ff);' % (coef_name[i], coef))

    for i in xrange(order):
        lines.append('const __m128 %s = _mm_mul_ps(x, %s);' % (power_name[i + 1], power_name[i]))

    for i in xrange(len(coefs)):
        lines.append('const __m128 t%d = _mm_mul_ps(%s, %s);' % (i, power_name[i], coef_name[i]))

    lines.append('__m128 result = t0;');
    for i in xrange(1, len(coefs)):
        lines.append('result = _mm_add_ps(result, t%d);' % i)

    lines.append('return result;');
    return lines


def render_function(lines, name, comment):
    tmp = []
    tmp.append('// %s' % comment)
    tmp.append('__m128 %s(__m128 x) {' % name)
    indent = ' ' * 4
    for line in lines:
        tmp.append(indent + line)
    tmp.append('}')

    return '\n'.join(tmp)


if __name__ == '__main__':
    main()
