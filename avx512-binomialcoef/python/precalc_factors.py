#!/usr/bin/env python3

import textwrap
from string import Template
from factor import precalculate, FactorialNumber

CPP="""// generated by $script

#include <cstddef>

namespace avx512binom {
    constexpr size_t primes_count = $primes_count;
    constexpr size_t numbers_count = $numbers_count;
    constexpr size_t factorials_count = $factorials_count;

    const uint64_t primes[primes_count] = {
$primes_list
    };

    const int8_t numbers[numbers_count][primes_count] = {
$numbers_list
    };

    const int8_t factorials[factorials_count][primes_count] = {
$factorials_list
    };
}
"""


def factorial(k, factored):
    v = factored[0].clone()
    for i in range(1, k):
        v += factored[i]

    return v


def exponents(numbers):
    for k, number in enumerate(numbers):
        for power in number.powers:
            yield power


def validate_exponents(numbers):
    for k, number in enumerate(numbers):
        for power in number.powers:
            assert power < 64, (k, str(number))


def main():
    numbers = list(precalculate())
    validate_exponents(numbers);
    # print(max(exponents(numbers)))  ## it's 8

    factorials = []
    factorials_count = 66
    for i in range(factorials_count):
        f = factorial(i, numbers)
        factorials.append(f)

    validate_exponents(factorials);

    primes = numbers[0].primes
    d = {}

    indent = ' '*8
    
    d['script'] = __file__
    d['primes_count'] = len(primes)
    d['numbers_count'] = len(numbers)
    d['factorials_count'] = factorials_count

    primes_list = ', '.join(map(str, primes.prime.values()))
    primes_list = textwrap.fill(primes_list, width=72 - 8)
    primes_list = textwrap.indent(primes_list, indent)
    d['primes_list'] = primes_list

    numbers_list = []
    for index, number in enumerate(numbers):
        val  = number.val()
        row  = ','.join(map(str, number.powers))
        row  = f"{indent}/* {val:3} */ {{{row}}}"
        last = (index == len(numbers) - 1)
        if not last:
            row += ','

        numbers_list.append(row)

    numbers_list = '\n'.join(numbers_list)
    d['numbers_list'] = numbers_list

    factorials_list = []
    for index, number in enumerate(factorials):
        val  = index + 1
        row  = ','.join(map(str, number.powers))
        row  = f"{indent}/* {val:3}! */ {{{row}}}"
        last = (index == len(numbers) - 1)
        if not last:
            row += ','

        factorials_list.append(row)

    factorials_list = '\n'.join(factorials_list)
    d['factorials_list'] = factorials_list

    print(Template(CPP).safe_substitute(d))


if __name__ == '__main__':
    main()
